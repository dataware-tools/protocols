openapi: 3.0.2
info:
  title: permission manager
  version: '1.0'
  description: Permision manage APIs
  contact:
    email: contact@hdwlab.co.jp
    name: Human Dataware Lab. Co. Ltd.
    url: 'http://www.hdwlab.co.jp/'
  license:
    name: Apache-2.0
servers:
  - url: 'http://localhost:8080'
paths:
  /users:
    get:
      summary: Get list of users
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
              examples: {}
      operationId: listUsers
      description: Get user list.
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/search'
    patch:
      summary: ''
      operationId: batchUpdateUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateUsersResponse'
      description: Batch update users. This endpoint doesn't accept to insert new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateUserRequest'
  '/users/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    patch:
      summary: Update user info.
      operationId: updateUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
      description: Update user info.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples: {}
      tags:
        - user
    get:
      summary: Get user
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
      description: Get user
      tags:
        - user
  /roles:
    get:
      summary: Get list of roles
      tags:
        - role
      operationId: listRoles
      description: Get list of roles.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRolesResponse'
    post:
      summary: Create role
      operationId: createRole
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRoleResponse'
      description: Create role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
            examples: {}
      tags:
        - role
  '/roles/{role_id}':
    get:
      summary: Get detail of role
      tags:
        - role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoleResponse'
              examples: {}
      operationId: getRole
      description: get detail of role
    parameters:
      - schema:
          type: integer
        name: role_id
        in: path
        required: true
    patch:
      summary: Update role
      operationId: updateRole
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRoleResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
            examples: {}
      description: Update role
      tags:
        - role
    delete:
      summary: Delete Role
      operationId: deleteRole
      responses:
        '200':
          description: OK
      description: Delete Role
      tags:
        - role
  /actions:
    get:
      summary: Get list of actions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListActionsResponse'
      operationId: listActions
      description: Get list of actions
      parameters:
        - $ref: '#/components/parameters/search'
      tags:
        - action
    parameters: []
  '/actions/{action_id}':
    parameters:
      - schema:
          type: string
        name: action_id
        in: path
        required: true
    get:
      summary: Get action
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActionResponse'
      operationId: getAction
      description: Get Action
      tags:
        - action
  /permitted-actions:
    get:
      summary: Your GET endpoint
      tags:
        - permitted-action
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of permitted action ids.
                items:
                  type: string
      operationId: listPermittedActions
      description: Get list of permitted actions for a database.
      parameters:
        - schema:
            type: string
          in: query
          name: database_id
          required: true
          description: Database id for checking permitted actions.
        - schema:
            type: string
          in: query
          name: user_id
          description: 'User id to check permission. If not specified, the id of the accessing user is used.'
  '/permitted-actions/{action_id}':
    parameters:
      - schema:
          type: string
        name: action_id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
                description: Whether the action is permitted.
      operationId: getIfActionPermitted
      parameters:
        - schema:
            type: string
          in: query
          name: database_id
          required: true
          description: Database id for checking permitted actions.
        - schema:
            type: string
          in: query
          name: user_id
          description: 'User id to check permission. If not specified, the id of the accessing user is used.'
      description: Get if the action is permitted on a database.
      tags:
        - permitted-action
  /permitted-databases:
    get:
      summary: Your GET endpoint
      tags:
        - permitted-database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPermittedDatabasesResponse'
      operationId: getPermittedDatabases
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPermittedDatabasesRequest'
        description: ''
      description: Get list of permitted databases filtered from the input.
components:
  schemas:
    RoleModel:
      description: Model for role.
      type: object
      x-examples:
        example-1:
          description: example
          name: role1
          role_id: '1'
          permissions:
            - databases:
                - db1
                - db*
              actions:
                - action_id: '1'
                  name: action1
      title: RoleModel
      properties:
        description:
          type: string
        name:
          type: string
        role_id:
          type: integer
        permissions:
          type: array
          description: ''
          items:
            type: object
            properties:
              databases:
                type: array
                items:
                  type: string
              actions:
                type: array
                items:
                  $ref: '#/components/schemas/ActionModel'
            required:
              - databases
              - actions
      required:
        - description
        - name
        - role_id
        - permissions
    UserModel:
      title: UserModel
      type: object
      description: Model for user
      x-examples:
        example-1:
          user_id: '1'
          name: Tarou
          roles:
            - admin
            - user
      properties:
        user_id:
          type: string
        name:
          type: string
        roles:
          type: array
          description: ''
          items:
            type: object
            properties:
              role_id:
                type: number
              name:
                type: string
            required:
              - role_id
              - name
      required:
        - user_id
        - name
        - roles
    ActionModel:
      title: ActionModel
      type: object
      description: Model for action.
      x-examples:
        example-1:
          action_id: read_public
          name: read_public
      properties:
        action_id:
          type: string
          description: ''
        name:
          type: string
      required:
        - action_id
        - name
    ListUsersResponse:
      title: listUserResponse
      type: object
      properties:
        page:
          type: number
        per_page:
          type: number
        length:
          type: number
        total:
          type: number
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserModel'
      required:
        - page
        - per_page
        - length
        - total
        - users
    GetUserResponse:
      $ref: '#/components/schemas/UserModel'
    UpdateUserResponse:
      $ref: '#/components/schemas/UserModel'
    GetRoleResponse:
      $ref: '#/components/schemas/RoleModel'
    UpdateRoleResponse:
      $ref: '#/components/schemas/RoleModel'
    ListRolesResponse:
      title: listRolesResponse
      type: object
      properties:
        page:
          type: number
        per_page:
          type: number
        length:
          type: number
        total:
          type: number
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleModel'
      required:
        - page
        - per_page
        - length
        - total
        - roles
    ListActionsResponse:
      title: listActionsResponse
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ActionModel'
      required:
        - actions
    UpdateRoleRequest:
      title: updateRoleRequest
      type: object
      properties:
        permissions:
          type: array
          items:
            type: object
            properties:
              databases:
                type: array
                items:
                  type: string
              action_ids:
                type: array
                items:
                  type: string
        name:
          type: string
        description:
          type: string
    UpdateUserRequest:
      title: updateUserRequest
      type: object
      properties:
        role_ids:
          type: array
          description: role id array
          items:
            type: number
    CreateRoleRequest:
      title: CreateRoleRequest
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: object
            properties:
              databases:
                type: array
                items:
                  type: string
              action_ids:
                type: array
                items:
                  type: string
        description:
          type: string
    GetActionResponse:
      title: GetActionResponse
      type: object
      properties:
        actions:
          $ref: '#/components/schemas/ActionModel'
      required:
        - actions
    GetPermittedDatabasesRequest:
      title: GetPermittedDatabasesRequest
      type: object
      properties:
        database_ids:
          type: array
          description: Id of databases for checking permitted or not to read.
          items:
            type: string
        user_id:
          type: string
          description: 'User id to check permission. If not specified, the id of the accessing user is used.'
      required:
        - database_ids
    GetPermittedDatabasesResponse:
      title: GetPermittedDatabasesResponse
      type: object
      properties:
        database_ids:
          type: array
          description: Ids of permitted databases.
          items:
            type: string
        selected_indices:
          type: array
          description: Indices of permitted databases in input.
          items:
            type: integer
    BatchUpdateUsersRequest:
      title: BatchUpdateUsersRequest
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
              role_ids:
                type: array
                items:
                  type: string
    BatchUpdateUsersResponse:
      title: BatchUpdateUsersResponse
      type: array
      items:
        $ref: '#/components/schemas/UserModel'
  responses: {}
  parameters:
    per_page:
      name: per_page
      in: query
      required: false
      schema:
        type: integer
      description: Number of results per page.
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
      description: Page index of the results to return.
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
      description: Search keyword for name of records
tags:
  - name: action
  - name: role
  - name: permitted-action
  - name: user
