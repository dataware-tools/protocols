openapi: 3.0.2
info:
  title: permission manager
  version: '1.0'
  description: Permision manage APIs
  contact:
    email: contact@hdwlab.co.jp
    name: Human Dataware Lab. Co. Ltd.
    url: 'http://www.hdwlab.co.jp/'
  license:
    name: Apache-2.0
servers:
  - url: 'http://localhost:8080'
paths:
  /users:
    get:
      summary: Get list of users
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  page:
                    type: number
                  per_page:
                    type: number
                  length:
                    type: number
                  users:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: number
                required:
                  - page
                  - per_page
                  - length
                  - users
                  - total
              examples: {}
      operationId: listUsers
      description: Get user list.
      parameters:
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/search'
  '/users/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    patch:
      summary: Update user info.
      operationId: updateUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Update user info.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteUser'
            examples: {}
      tags:
        - user
    get:
      summary: Get user
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Get user
      tags:
        - user
  /roles:
    get:
      summary: Get list of roles
      tags:
        - role
      operationId: listRoles
      description: Get list of roles.
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  page:
                    type: integer
                  per_page:
                    type: integer
                  length:
                    type: integer
                  total:
                    type: integer
    post:
      summary: Create role
      operationId: createRole
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      description: Create role.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteRole'
            examples: {}
      tags:
        - role
  '/roles/{role_id}':
    get:
      summary: Get detail of role
      tags:
        - role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
              examples: {}
      operationId: getRole
      description: get detail of role
    parameters:
      - schema:
          type: string
        name: role_id
        in: path
        required: true
    patch:
      summary: Update role
      operationId: updateRole
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteRole'
            examples: {}
      description: Update role
      tags:
        - role
    delete:
      summary: Delete Role
      operationId: deleteRole
      responses:
        '200':
          description: OK
      description: Delete Role
      tags:
        - role
  /actions:
    get:
      summary: Get list of actions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  actions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Action'
      operationId: lsitActions
      description: Get list of actions
      parameters:
        - $ref: '#/components/parameters/search'
      tags:
        - action
    parameters: []
  '/actions/{action_id}':
    parameters:
      - schema:
          type: string
        name: action_id
        in: path
        required: true
    get:
      summary: Get action
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
      operationId: getAction
      description: Get Action
      tags:
        - action
components:
  schemas:
    Role:
      description: Model for role.
      type: object
      x-examples:
        example-1:
          description: example
          name: role1
          role_id: '1'
          permissions:
            - databases:
                - db1
                - db*
              actions:
                - action_id: '1'
                  name: action1
      title: RoleModel
      properties:
        description:
          type: string
        name:
          type: string
        role_id:
          type: integer
        permissions:
          type: array
          items:
            type: object
            properties:
              databases:
                type: array
                items:
                  type: string
              actions:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
    User:
      title: User
      type: object
      description: Model for user
      x-examples:
        example-1:
          user_id: '1'
          name: Tarou
          roles:
            - admin
            - user
      properties:
        user_id:
          type: string
        name:
          type: string
        roles:
          type: array
          description: ''
          items:
            type: object
            properties:
              name:
                type: string
              role_id:
                type: string
    Action:
      title: Action
      type: object
      description: Model for action.
      x-examples:
        example-1:
          action_id: read_public
          name: read_public
      properties:
        action_id:
          type: string
          description: ''
        name:
          type: string
    WriteUser:
      title: WriteUser
      type: object
      description: Model for writing user
      properties:
        role_ids:
          type: array
          items:
            type: integer
    WriteRole:
      title: WriteRole
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        permissions:
          type: object
          properties:
            databases:
              type: array
              description: array of regex pattern
              items:
                type: string
            acion_ids:
              type: array
              items:
                type: string
  responses: {}
  parameters:
    per_page:
      name: per_page
      in: query
      required: false
      schema:
        type: integer
      description: Number of results per page.
    page:
      name: page
      in: query
      required: false
      schema:
        type: integer
      description: Page index of the results to return.
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
      description: Search keyword for name of records
tags:
  - name: action
  - name: role
  - name: user
